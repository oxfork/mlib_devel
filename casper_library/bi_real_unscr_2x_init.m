function bi_real_unscr_2x_init(blk, varargin)
% Initialize and configure a bi_real_unscr_2x block.
% 
% bi_real_unscr_2x_init(blk, varargin)
% 
% blk = the block to configure
% varargin = {'varname', 'value', ...} pairs
% 
% Valid varnames:
% * FFTSize = Size of the FFT (2^FFTSize points).
% * n_bits = Data bitwidth.
% * add_latency = Latency of adders blocks.
% * conv_latency = Latency of cast blocks.
% * bram_latency = Latency of BRAM blocks.
% * bram_map = Store map in BRAM.
% * dsp48_adders = Use DSP48s for adders.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                             %
%   Center for Astronomy Signal Processing and Electronics Research           %
%   http://casper.berkeley.edu                                                %
%   Copyright (C) 2010 William Mallard                                        %
%                                                                             %
%   This program is free software; you can redistribute it and/or modify      %
%   it under the terms of the GNU General Public License as published by      %
%   the Free Software Foundation; either version 2 of the License, or         %
%   (at your option) any later version.                                       %
%                                                                             %
%   This program is distributed in the hope that it will be useful,           %
%   but WITHOUT ANY WARRANTY; without even the implied warranty of            %
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             %
%   GNU General Public License for more details.                              %
%                                                                             %
%   You should have received a copy of the GNU General Public License along   %
%   with this program; if not, write to the Free Software Foundation, Inc.,   %
%   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.               %
%                                                                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Set default vararg values.
defaults = { ...
    'FFTSize', 2, ...
    'n_bits', 18, ...
    'add_latency', 1, ...
    'conv_latency', 1, ...
    'bram_latency', 2, ...
    'bram_map', 'off', ...
    'dsp48_adders', 'off', ...
};

% Skip init script if mask state has not changed.
if same_state(blk, 'defaults', defaults, varargin{:}),
  return
end

% Verify that this is the right mask for the block.
check_mask_type(blk, 'bi_real_unscr_2x');

% Disable link if state changes from default.
munge_block(blk, varargin{:});

% Retrieve values from mask fields.
FFTSize = get_var('FFTSize', 'defaults', defaults, varargin{:});
n_bits = get_var('n_bits', 'defaults', defaults, varargin{:});
add_latency = get_var('add_latency', 'defaults', defaults, varargin{:});
conv_latency = get_var('conv_latency', 'defaults', defaults, varargin{:});
bram_latency = get_var('bram_latency', 'defaults', defaults, varargin{:});
bram_map = get_var('bram_map', 'defaults', defaults, varargin{:});
dsp48_adders = get_var('dsp48_adders', 'defaults', defaults, varargin{:});

if FFTSize == 0,
  delete_lines(blk);
  clean_blocks(blk);
  save_state(blk, 'defaults', defaults, varargin{:});
  return;
end

% Generate reorder maps.
map_even = bit_reverse(0:2^(FFTSize-1)-1, FFTSize-1);
map_odd = bit_reverse(2^(FFTSize-1)-1:-1:0, FFTSize-1);

%%%%%%%%%%%%%%%%%%
% Start drawing! %
%%%%%%%%%%%%%%%%%%

% Delete all lines.
delete_lines(blk)

%
% Add inputs and outputs.
%

reuse_block(blk, 'sync', 'built-in/inport', ...
    'Position', [15 13 45 27], ...
    'Port', '1');
reuse_block(blk, 'even', 'built-in/inport', ...
    'Position', [15 138 45 152], ...
    'Port', '2');
reuse_block(blk, 'odd', 'built-in/inport', ...
    'Position', [15 263 45 277], ...
    'Port', '3');

reuse_block(blk, 'sync_out', 'built-in/outport', ...
    'Position', [575 18 605 32], ...
    'Port', '1');
reuse_block(blk, 'pol12_out', 'built-in/outport', ...
    'Position', [575 133 605 147], ...
    'Port', '2');
reuse_block(blk, 'pol34_out', 'built-in/outport', ...
    'Position', [575 168 605 182], ...
    'Port', '3');

%
% Add reorder blocks.
%

reuse_block(blk, 'en_even', 'xbsIndex_r4/Constant', ...
    'Position', [15 110 45 130], ...
    'ShowName', 'off', ...
    'arith_type', 'Boolean', ...
    'const', '1', ...
    'n_bits', '1', ...
    'bin_pt', '0', ...
    'explicit_period', 'on', ...
    'period', '1');

reuse_block(blk, 'reorder_even', 'casper_library_reorder/reorder', ...
    'Position', [100 82 175 158], ...
    'map', mat2str(map_even), ...
    'n_inputs', '1', ...
    'bram_latency', num2str(bram_latency), ...
    'map_latency', '1', ...
    'double_buffer', '0', ...
    'bram_map', bram_map);

reuse_block(blk, 'en_odd', 'xbsIndex_r4/Constant', ...
    'Position', [15 235 45 255], ...
    'ShowName', 'off', ...
    'arith_type', 'Boolean', ...
    'const', '1', ...
    'n_bits', '1', ...
    'bin_pt', '0', ...
    'explicit_period', 'on', ...
    'period', '1');

reuse_block(blk, 'reorder_odd', 'casper_library_reorder/reorder', ...
    'Position', [100 207 175 283], ...
    'map', mat2str(map_odd), ...
    'n_inputs', '1', ...
    'bram_latency', num2str(bram_latency), ...
    'map_latency', '1', ...
    'double_buffer', '0', ...
    'bram_map', bram_map);

%
% Add misc logic.
%

reuse_block(blk, 'Counter', 'xbsIndex_r4/Counter', ...
    'Position', [215 85 260 105], ...
    'ShowName', 'off', ...
    'cnt_type', 'Free Running', ...
    'cnt_to', 'Inf', ...
    'operation', 'Up', ...
    'start_count', '0', ...
    'cnt_by_val', '1', ...
    'arith_type', 'Unsigned', ...
    'n_bits', 'FFTSize-1', ...
    'bin_pt', '0', ...
    'load_pin', 'off', ...
    'rst', 'on', ...
    'en', 'off', ...
    'explicit_period', 'on', ...
    'period', '1', ...
    'use_behavioral_HDL', 'off', ...
    'implementation', 'Fabric');...

reuse_block(blk, 'Constant', 'xbsIndex_r4/Constant', ...
    'Position', [225 110 255 130], ...
    'ShowName', 'off', ...
    'arith_type', 'Unsigned', ...
    'const', '0', ...
    'n_bits', 'FFTSize-1', ...
    'bin_pt', '0', ...
    'explicit_period', 'on', ...
    'period', '1');

reuse_block(blk, 'Delay', 'xbsIndex_r4/Delay', ...
    'Position', [225 260 255 280], ...
    'ShowName', 'off', ...
    'latency', '1', ...
    'reg_retiming', 'off');

reuse_block(blk, 'Relational', 'xbsIndex_r4/Relational', ...
    'Position', [300 80 350 130], ...
    'ShowName', 'off', ...
    'mode', 'a=b', ...
    'en', 'off', ...
    'latency', '0');

reuse_block(blk, 'Mux', 'xbsIndex_r4/Mux', ...
    'Position', [400 162 425 228], ...
    'ShowName', 'off', ...
    'inputs', '2', ...
    'en', 'off', ...
    'latency', '0', ...
    'Precision', 'Full');

reuse_block(blk, 'sync_delay', 'xbsIndex_r4/Delay', ...
    'Position', [485 15 515 35], ...
    'ShowName', 'on', ...
    'latency', 'add_latency + conv_latency', ...
    'reg_retiming', 'off');

%
% Add hilbert block.
%

if strcmp(dsp48_adders, 'on'),
    hilbert_name = 'hilbert_dsp48e';
    reuse_block(blk, hilbert_name, 'casper_library_ffts_internal/hilbert_dsp48e', ...
        'Position', [475 132 525 183], ...
        'LinkStatus', 'inactive', ...
        'BitWidth', 'n_bits', ...
        'conv_latency', 'conv_latency');
else
    hilbert_name = 'hilbert';
    reuse_block(blk, hilbert_name, 'casper_library_ffts_internal/hilbert', ...
        'Position', [475 132 525 183], ...
        'LinkStatus', 'inactive', ...
        'BitWidth', 'n_bits', ...
        'add_latency', 'add_latency', ...
        'conv_latency', 'conv_latency');
end

%
% Draw wires.
%

add_line(blk, 'sync/1', 'reorder_even/1');
add_line(blk, 'en_even/1', 'reorder_even/2');
add_line(blk, 'even/1', 'reorder_even/3');

add_line(blk, 'sync/1', 'reorder_odd/1');
add_line(blk, 'en_odd/1', 'reorder_odd/2');
add_line(blk, 'odd/1', 'reorder_odd/3');

add_line(blk, 'reorder_even/1', 'sync_delay/1');
add_line(blk, 'reorder_even/1', 'Counter/1');
add_line(blk, 'reorder_even/3', [hilbert_name, '/1']);
add_line(blk, 'reorder_even/3', 'Mux/3');

add_line(blk, 'reorder_odd/3', 'Delay/1');

add_line(blk, 'sync_delay/1', 'sync_out/1');
add_line(blk, 'Counter/1', 'Relational/1');
add_line(blk, 'Constant/1', 'Relational/2');
add_line(blk, 'Delay/1', 'Mux/2');

add_line(blk, 'Relational/1', 'Mux/1');
add_line(blk, 'Mux/1', [hilbert_name, '/2']);
add_line(blk, [hilbert_name, '/1'], 'pol12_out/1');
add_line(blk, [hilbert_name, '/2'], 'pol34_out/1');

% Delete all unconnected blocks.
clean_blocks(blk);

%%%%%%%%%%%%%%%%%%%
% Finish drawing! %
%%%%%%%%%%%%%%%%%%%

% Save block state to stop repeated init script runs.
save_state(blk, 'defaults', defaults, varargin{:});

