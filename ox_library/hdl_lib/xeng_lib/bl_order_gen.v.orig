`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    19:03:50 11/23/2011 
// Design Name: 
// Module Name:    bl_order_gen 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module bl_order_gen(
    clk,
    sync,
    en,
    ant_a,
    ant_b,
    buf_sel
    );
    
    `include "math_func.txt"
    parameter N_ANTS = 16;
    localparam ANT_BITS = log2(N_ANTS);
    localparam N_BLS = N_ANTS * (N_ANTS/2+1); //Number of baselines output by the Xengine before masking
    localparam BL_BITS = log2(N_BLS);
    
    input clk;
    input sync;
    input en;
    output [ANT_BITS-1:0] ant_a;
    output [ANT_BITS-1:0] ant_b;
    output buf_sel;
    
    reg [BL_BITS-1:0] bl_ctr;
    reg buf_sel_reg = 1'b0;
    
    always @(posedge(clk)) begin
        if(sync) begin
            bl_ctr <= 0;
            buf_sel_reg <= 1'b0;
        end else if(en) begin
            if (bl_ctr == N_BLS-1) begin
                bl_ctr <= 0;
                buf_sel_reg <= ~buf_sel_reg;
            end else begin                
            bl_ctr <= bl_ctr + 1;
            end
        end
    end
      
    
    reg [ANT_BITS-1:0] a;
    reg [ANT_BITS-1:0] b;
    reg [ANT_BITS-1:0] offset;
    reg [ANT_BITS-1:0] ctr;
    
    always @(posedge(clk)) begin
        if (sync || bl_ctr == (N_BLS-1)) begin
            a <= 0;
            b <= 0;
            offset <= 0;
            ctr <= 0;
        end else if (en) begin
            if(a==b || a==N_ANTS-1) begin
            // if(a==b) is the condition for the main output
            // if(a==N_ANTS-1) is the condition for the "last triangle" outputs
                if (ctr == (N_ANTS/2) || a==N_ANTS-1) begin
                    a <= offset + 1;
                    offset <= offset + 1;
                end else begin
                    a <= offset;
                end
                b <= b == N_ANTS-1 ? 0 : b+1;
                ctr <= 0;
            end else begin
                a <= a+1;
                ctr <= ctr+1;
            end 
        end
    end
    
    assign ant_a = a;
    assign ant_b = b;
    assign buf_sel = buf_sel_reg;

endmodule
